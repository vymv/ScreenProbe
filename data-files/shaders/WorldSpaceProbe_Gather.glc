#version 430
#extension GL_ARB_compute_variable_group_size : enable
//#include "WorldSpaceProbe_Common.pix"
#define USED_PROBE_INDEX 0xFFFFFFFE
#define RADIANCE_PROBE_MAX_CLIPMAPS 6
#define INVALID_PROBE_INDEX 0xFFFFFFFF


layout( local_size_variable ) in;
layout(std430, binding = 0) buffer worldSpacePosition{vec4 worldspacePositionData[];};

layout(r32ui) uniform uimage3D RadianceProbeIndirectionTexture;

layout(std430, binding=2) buffer worldPositionToRadianceProbeCoordForMark {vec4 WorldPositionToRadianceProbeCoordForMark[];};

layout(std430, binding=3) buffer radianceProbeCoordToWorldPosition {vec4 RadianceProbeCoordToWorldPosition[];};

layout(r32ui) uniform uimage2D numWorldSpacePosition;

uniform int clipmapResolution;
shared int group_counter;

vec3 getProbeWorldPosition(ivec3 probePosition, int ClipmapIndex){
	vec3 ProbeWorldPosition = probePosition * RadianceProbeCoordToWorldPosition[ClipmapIndex].w + RadianceProbeCoordToWorldPosition[ClipmapIndex].xyz;
	return ProbeWorldPosition;
}


void main(){
    if(gl_GlobalInvocationID == 0){
		imageStore(numWorldSpacePosition, ivec2(0,0), uvec4(0));
	}
	barrier();
	ivec3 coord = ivec3(gl_GlobalInvocationID);
	//imageStore(RadianceProbeIndirectionTexture, coord, uvec4(2));
	uvec4 var = imageLoad(RadianceProbeIndirectionTexture, coord);
	int clipmapIndex = int(coord.x / clipmapResolution);
	coord.x = coord.x % clipmapResolution;
	
	uint ProbeIndex = var.x;
	if(ProbeIndex != INVALID_PROBE_INDEX){
		
		//uint Index = atomicCounterIncrement(probeCount);
		uint Index = imageAtomicAdd(numWorldSpacePosition, ivec2(0,0), uint(1));
		worldspacePositionData[Index] = vec4(getProbeWorldPosition(coord, clipmapIndex),ProbeIndex);
	}
}
