#version 430
#extension GL_ARB_texture_query_lod : enable
#extension GL_ARB_compute_variable_group_size : enable
//#include "WorldSpaceProbe_Common.pix"
#define USED_PROBE_INDEX 0xFFFFFFFE
#define RADIANCE_PROBE_MAX_CLIPMAPS 4
#define INVALID_PROBE_INDEX 0xFFFFFFFF

layout( local_size_variable ) in;

struct RadianceProbeCoord
{
	vec3 ProbeMinCoord;
	vec3 ProbeMaxCoord;
	uint  ClipmapIndex;
};


layout(std430, binding=0) buffer worldPositionToRadianceProbeCoordForMark {vec4 WorldPositionToRadianceProbeCoordForMark[];};

layout(std430, binding=1) buffer radianceProbeCoordToWorldPosition {vec4 RadianceProbeCoordToWorldPosition[];};

layout(std430, binding=2) buffer lastFrameRadianceProbeCoordToWorldPosition { vec4 LastFrameRadianceProbeCoordToWorldPosition[];};

layout(r32i) uniform iimage2D ProbeFreeListAllocator;

layout(r32ui) uniform uimage3D RadianceProbeIndirectionTexture;
layout(r32ui) uniform uimage3D LastFrameRadianceProbeIndirectionTexture;
layout(r32ui) uniform uimage2D ProbeLastUsedFrame;
layout(r32ui) uniform uimage2D ProbeFreeList;
layout(rgba8) uniform image2D reverseProbeIndex;

uniform uint FrameNumber;

uniform int NumFramesToKeepCachedProbes;
uniform int RadianceProbeClipmapResolution;

uniform int NumRadianceProbeClipmapsForMark;
uniform int RadianceProbeClipmapResolutionForMark;
uniform float InvClipmapFadeSizeForMark;
uniform int MaxProbeCount;


ivec3 GetRadianceProbeCoord(vec3 ProbeWorldPosition, uint ClipmapIndex)
{
	// Use floor() to round negative numbers down
	return ivec3(floor(ProbeWorldPosition * WorldPositionToRadianceProbeCoordForMark[ClipmapIndex].w + WorldPositionToRadianceProbeCoordForMark[ClipmapIndex].xyz));
}

void UpdateCacheForUsedProbesCS(){

	uint ClipmapIndex = gl_GlobalInvocationID.x / RadianceProbeClipmapResolution;
	ivec3 LastFrameProbeCoord = ivec3(gl_GlobalInvocationID.x - ClipmapIndex * RadianceProbeClipmapResolution, gl_GlobalInvocationID.yz);

	if(FrameNumber == 1){
//		if(all(equal(gl_GlobalInvocationID, uvec3(0)))){
//			imageStore(ProbeFreeListAllocator, ivec2(0,0),ivec4(MaxProbeCount));
//		}
		imageStore(LastFrameRadianceProbeIndirectionTexture, ivec3(gl_GlobalInvocationID), uvec4(INVALID_PROBE_INDEX));
	}
	if (ClipmapIndex < RADIANCE_PROBE_MAX_CLIPMAPS && all(lessThan(LastFrameProbeCoord, ivec3(RadianceProbeClipmapResolution))))
	{
		ivec3 LastFrameProbeIndirectionTextureCoord = ivec3(gl_GlobalInvocationID);
		uint LastFrameProbeIndex = imageLoad(LastFrameRadianceProbeIndirectionTexture, LastFrameProbeIndirectionTextureCoord).r;

		if (LastFrameProbeIndex != INVALID_PROBE_INDEX)
		{
			vec3 ProbeWorldPosition = LastFrameProbeCoord * LastFrameRadianceProbeCoordToWorldPosition[ClipmapIndex].w + LastFrameRadianceProbeCoordToWorldPosition[ClipmapIndex].xyz;
			ivec3 ProbeCoord = GetRadianceProbeCoord(ProbeWorldPosition, ClipmapIndex);
			
			bool bReused = false;
			
			/*
			if marked probe was used in prev valid frame, reuse it, which means we don't need to allocate radiance cache for it later.
			*/
			if (all(greaterThanEqual(ProbeCoord, ivec3(0))) && all(lessThan(ProbeCoord, ivec3(RadianceProbeClipmapResolution))))
			{
				ivec3 ProbeIndirectionTextureCoord = ivec3(ProbeCoord.x + ClipmapIndex * RadianceProbeClipmapResolution, ProbeCoord.yz);
				uint ProbeUsedMarker = imageLoad(RadianceProbeIndirectionTexture, ProbeIndirectionTextureCoord).r;
				uint LastUsedFrameNumber = imageLoad(ProbeLastUsedFrame, ivec2(LastFrameProbeIndex,0)).r;
					
				if (ProbeUsedMarker == USED_PROBE_INDEX
					|| FrameNumber - LastUsedFrameNumber < NumFramesToKeepCachedProbes)
				{
					bReused = true;
					if (ProbeUsedMarker == USED_PROBE_INDEX)
					{
						imageStore(ProbeLastUsedFrame, ivec2(LastFrameProbeIndex,0), uvec4(FrameNumber));
					}
					imageStore(RadianceProbeIndirectionTexture, ProbeIndirectionTextureCoord, uvec4(LastFrameProbeIndex));
				
					imageStore(reverseProbeIndex, ivec2(LastFrameProbeIndex %128, LastFrameProbeIndex /128), vec4(ProbeWorldPosition, 0));
				}
			}
			/*
			if probes in last frame cannot be reused, then their space are free to allocate to probes in current frame
			*/
			if (!bReused)
			{
				int FreeIndex;
				FreeIndex = imageAtomicAdd(ProbeFreeListAllocator,ivec2(0,0), 1);
				imageStore(ProbeFreeList,ivec2(FreeIndex,0), uvec4(LastFrameProbeIndex));
			}
		}
	}
}

void main(){
	UpdateCacheForUsedProbesCS();
}
