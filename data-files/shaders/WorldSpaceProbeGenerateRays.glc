#version 430
#extension GL_ARB_texture_query_lod : enable
#extension GL_ARB_compute_variable_group_size : enable
//#include "WorldSpaceProbe_Common.pix"
#include <g3dmath.glsl>
#include <octahedral.glsl>

#define RadianceProbeResolution 16
#define RadianceProbeTraceCount RadianceProbeResolution * RadianceProbeResolution
#define AtlasResolutionInProbe 128
#define AtlasResolution RadianceProbeResolution * AtlasResolutionInProbe
#define AllocatedTrace RadianceProbeResolution * AtlasResolutionInProbe

layout( local_size_variable ) in;

layout(r32ui) uniform uimage2D ProbeTraceAllocator;
layout(rgba32f) uniform image2D ProbeTraceData;

layout(std430, binding=0) buffer rayOrigins {vec4 RayOrigins[AllocatedTrace][RadianceProbeTraceCount];};
layout(std430, binding=1) buffer rayDirections {vec4 RayDirections[AllocatedTrace][RadianceProbeTraceCount];};
layout(std430, binding=2) buffer rayMarker {uvec2 RayMarker[AtlasResolutionInProbe][AtlasResolutionInProbe];};


uniform mat3 randomOrientation;
layout(rgba32f) uniform image2D iRayOrigins;
layout(rgba32f) uniform image2D iRayDirections;


void main(){
	ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
	int traceIndex = coord.x;
	
	if(traceIndex < imageLoad(ProbeTraceAllocator, ivec2(0,0)).r){
	
		vec4 traceData = imageLoad(ProbeTraceData, ivec2(traceIndex, 0));
		uint probeIndex = floatBitsToUint(traceData.w) & 0x00ffffff;
		int rayID = coord.y;
		ivec2 markCoord = ivec2(probeIndex % AtlasResolutionInProbe, probeIndex / AtlasResolutionInProbe);
		ivec2 atlasCoord = markCoord * RadianceProbeResolution
			+ ivec2(rayID % RadianceProbeResolution, rayID /RadianceProbeResolution);

		vec3 ProbeWorldPosition = traceData.xyz;
		
		vec4 rayDirection = vec4(randomOrientation * sphericalFibonacci(rayID, RadianceProbeTraceCount), inf);
		//ivec2 dirCoord = ivec2((octEncode(rayDirection.xyz) + 1) * 0.5f * RadianceProbeResolution);
		RayDirections[traceIndex][rayID] = rayDirection;
		RayOrigins[traceIndex][rayID] = vec4(ProbeWorldPosition, 0);
		RayMarker[markCoord.y][markCoord.x] = uvec2(probeIndex, traceIndex);
		imageStore(iRayOrigins, atlasCoord, vec4(ProbeWorldPosition, 0));
		imageStore(iRayDirections, atlasCoord, rayDirection);
	}
}
